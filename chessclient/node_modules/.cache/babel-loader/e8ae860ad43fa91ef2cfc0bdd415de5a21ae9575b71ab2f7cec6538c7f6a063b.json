{"ast":null,"code":"var _jsxFileName = \"/home/adis-dell/Documents/JS/JS_rpise2/Chess_React/chessclient/src/data-provider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useContext, createContext, useReducer, useEffect } from \"react\";\nimport data from \"./data.json\";\nimport { getPermittedTiles, getMove, makeMove, gameData, listenPlayerLeft } from \"./Controller\";\nimport { asc, deepCopy } from \"./helper-funcs\";\nimport { useLogin } from \"./LoginProvider\";\n\n// Creating a Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext();\nlet movePhase = false;\n// Custom Hook\nexport const useData = () => {\n  _s();\n  return useContext(DataContext);\n};\n_s(useData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst changePhase = () => movePhase = !movePhase;\nconst updateBoardTiles = (board, tiles) => {\n  for (let v of tiles) {\n    board[asc([v.row, 7])][v.col] = true;\n  }\n};\nconst clearSelectedTiles = board => {\n  for (let i in board) {\n    for (let j in board[i]) {\n      board[i][j] = false;\n    }\n  }\n};\nfunction changeBoardState(setBoardState, func, board, tiles = {}) {\n  const newBoard = [...board];\n  func(newBoard, tiles);\n  setBoardState(newBoard);\n}\nconst getData = key => {\n  if (!data[key]) {\n    switch (key) {\n      case \"board\":\n        return deepCopy(gameData.board);\n      case \"turn\":\n        return gameData.freeze;\n      case \"side\":\n        return gameData.side;\n      case \"gameWon\":\n        return {\n          won: false\n        };\n      case \"movePhase\":\n        return false;\n      case \"status\":\n        {\n          if (gameData.freeze === true) {\n            return \"Waiting for other player\";\n          }\n          return \"Your Turn!\";\n        }\n      default:\n        new Error(\"Bad Value\");\n    }\n  }\n  return deepCopy(data[key]);\n};\nexport const clearData = () => {\n  [\"board\", \"state\", \"turn\", \"gameWon\", \"movePhase\"].forEach(val => sessionStorage.removeItem(val));\n};\n\n// A componenet which creates and returns the Context Provider\nexport default function DataProvider({\n  children\n}) {\n  _s2();\n  const {\n    player2\n  } = useLogin();\n  const [board, setBoard] = useState(getData(\"board\"));\n  const [boardState, setBoardState] = useState(getData(\"state\"));\n  const [file] = useState(data.file);\n  const [rowSize] = useState(8);\n  const [colSize] = useState(8);\n  const [turn, changeTurn] = useReducer(val => !val, getData(\"turn\"));\n  const [side, _] = useState(getData(\"side\"));\n  const [status, setStatus] = useState(getData(\"status\"));\n  const [gameOver, over] = useReducer(val => !val, false);\n  useEffect(() => {\n    if (side === \"black\") {\n      getMove(board => {\n        setBoard(board);\n        setStatus(\"Your Turn!\");\n        changeTurn();\n      });\n    }\n  }, []);\n  useEffect(() => {\n    listenPlayerLeft(() => {\n      over();\n      setStatus(`${player2} has left the game, Game Over!`);\n    });\n  }, []);\n  const onSelect = (row, col, disable) => {\n    if (disable) return;\n    if (movePhase) {\n      changePhase();\n      changeTurn();\n      changeBoardState(setBoardState, clearSelectedTiles, boardState);\n      setStatus(\"Waiting for Server..\");\n      makeMove(row, col, data => {\n        const endGame = data => {\n          setBoard(data.board);\n          const helper = val => {\n            if (val === side) setStatus(`You Win!`);else setStatus(`${player2} Wins!`);\n          };\n          switch (data.status) {\n            case \"Black\":\n              helper(\"black\");\n              break;\n            case \"White\":\n              helper(\"white\");\n              break;\n          }\n          over();\n        };\n        if (data === \"invalid\") {\n          setStatus(\"Your Turn!\");\n          changeTurn();\n        } else if (Array.isArray(data)) {\n          setStatus(\"Waiting for other player\");\n          setBoard(data);\n          getMove(data => {\n            if (Array.isArray(data)) {\n              setBoard(data);\n              setStatus(\"Your Turn!\");\n              changeTurn();\n              return;\n            }\n            endGame(data);\n          });\n        } else endGame(data);\n      });\n    } else {\n      changePhase();\n      changeTurn();\n      setStatus(\"Waiting for Server..\");\n      getPermittedTiles(row, col, pt => {\n        setStatus(\"Your Turn!\");\n        changeTurn();\n        if (pt === \"invalid\") {\n          changePhase();\n          return;\n        }\n        changeBoardState(setBoardState, updateBoardTiles, boardState, pt);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      board,\n      file,\n      movePhase,\n      onSelect,\n      rowSize,\n      colSize,\n      boardState,\n      turn,\n      side,\n      status,\n      gameOver\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 3\n  }, this);\n}\n_s2(DataProvider, \"ag7N4qPIxwhMAtIsBVhi2c7K+SM=\", false, function () {\n  return [useLogin];\n});\n_c = DataProvider;\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","useState","useContext","createContext","useReducer","useEffect","data","getPermittedTiles","getMove","makeMove","gameData","listenPlayerLeft","asc","deepCopy","useLogin","jsxDEV","_jsxDEV","DataContext","movePhase","useData","_s","changePhase","updateBoardTiles","board","tiles","v","row","col","clearSelectedTiles","i","j","changeBoardState","setBoardState","func","newBoard","getData","key","freeze","side","won","Error","clearData","forEach","val","sessionStorage","removeItem","DataProvider","children","_s2","player2","setBoard","boardState","file","rowSize","colSize","turn","changeTurn","_","status","setStatus","gameOver","over","onSelect","disable","endGame","helper","Array","isArray","pt","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/adis-dell/Documents/JS/JS_rpise2/Chess_React/chessclient/src/data-provider.js"],"sourcesContent":["import React, {\n\tuseState,\n\tuseContext,\n\tcreateContext,\n\tuseReducer,\n\tuseEffect,\n} from \"react\";\nimport data from \"./data.json\";\nimport {\n\tgetPermittedTiles,\n\tgetMove,\n\tmakeMove,\n\tgameData,\n\tlistenPlayerLeft,\n} from \"./Controller\";\nimport { asc, deepCopy } from \"./helper-funcs\";\nimport { useLogin } from \"./LoginProvider\";\n\n// Creating a Context\nconst DataContext = createContext();\nlet movePhase = false;\n// Custom Hook\nexport const useData = () => useContext(DataContext);\nconst changePhase = () => (movePhase = !movePhase);\n\nconst updateBoardTiles = (board, tiles) => {\n\tfor (let v of tiles) {\n\t\tboard[asc([v.row, 7])][v.col] = true;\n\t}\n};\n\nconst clearSelectedTiles = (board) => {\n\tfor (let i in board) {\n\t\tfor (let j in board[i]) {\n\t\t\tboard[i][j] = false;\n\t\t}\n\t}\n};\n\nfunction changeBoardState(setBoardState, func, board, tiles = {}) {\n\tconst newBoard = [...board];\n\tfunc(newBoard, tiles);\n\tsetBoardState(newBoard);\n}\n\nconst getData = (key) => {\n\tif (!data[key]) {\n\t\tswitch (key) {\n\t\t\tcase \"board\":\n\t\t\t\treturn deepCopy(gameData.board);\n\t\t\tcase \"turn\":\n\t\t\t\treturn gameData.freeze;\n\t\t\tcase \"side\":\n\t\t\t\treturn gameData.side;\n\t\t\tcase \"gameWon\":\n\t\t\t\treturn { won: false };\n\t\t\tcase \"movePhase\":\n\t\t\t\treturn false;\n\t\t\tcase \"status\": {\n\t\t\t\tif (gameData.freeze === true) {\n\t\t\t\t\treturn \"Waiting for other player\";\n\t\t\t\t}\n\t\t\t\treturn \"Your Turn!\";\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tnew Error(\"Bad Value\");\n\t\t}\n\t}\n\treturn deepCopy(data[key]);\n};\n\nexport const clearData = () => {\n\t[\"board\", \"state\", \"turn\", \"gameWon\", \"movePhase\"].forEach((val) =>\n\t\tsessionStorage.removeItem(val)\n\t);\n};\n\n// A componenet which creates and returns the Context Provider\nexport default function DataProvider({ children }) {\n\tconst { player2 } = useLogin();\n\tconst [board, setBoard] = useState(getData(\"board\"));\n\tconst [boardState, setBoardState] = useState(getData(\"state\"));\n\tconst [file] = useState(data.file);\n\tconst [rowSize] = useState(8);\n\tconst [colSize] = useState(8);\n\tconst [turn, changeTurn] = useReducer((val) => !val, getData(\"turn\"));\n\tconst [side, _] = useState(getData(\"side\"));\n\tconst [status, setStatus] = useState(getData(\"status\"));\n\tconst [gameOver, over] = useReducer((val) => !val, false);\n\n\tuseEffect(() => {\n\t\tif (side === \"black\") {\n\t\t\tgetMove((board) => {\n\t\t\t\tsetBoard(board);\n\t\t\t\tsetStatus(\"Your Turn!\");\n\t\t\t\tchangeTurn();\n\t\t\t});\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tlistenPlayerLeft(() => {\n\t\t\tover();\n\t\t\tsetStatus(`${player2} has left the game, Game Over!`);\n\t\t});\n\t}, []);\n\n\tconst onSelect = (row, col, disable) => {\n\t\tif (disable) return;\n\t\tif (movePhase) {\n\t\t\tchangePhase();\n\t\t\tchangeTurn();\n\t\t\tchangeBoardState(setBoardState, clearSelectedTiles, boardState);\n\t\t\tsetStatus(\"Waiting for Server..\");\n\t\t\tmakeMove(row, col, (data) => {\n\t\t\t\tconst endGame = (data) => {\n\t\t\t\t\tsetBoard(data.board);\n\t\t\t\t\tconst helper = (val) => {\n\t\t\t\t\t\tif (val === side) setStatus(`You Win!`);\n\t\t\t\t\t\telse setStatus(`${player2} Wins!`);\n\t\t\t\t\t};\n\t\t\t\t\tswitch (data.status) {\n\t\t\t\t\t\tcase \"Black\":\n\t\t\t\t\t\t\thelper(\"black\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"White\":\n\t\t\t\t\t\t\thelper(\"white\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tover();\n\t\t\t\t};\n\n\t\t\t\tif (data === \"invalid\") {\n\t\t\t\t\tsetStatus(\"Your Turn!\");\n\t\t\t\t\tchangeTurn();\n\t\t\t\t} else if (Array.isArray(data)) {\n\t\t\t\t\tsetStatus(\"Waiting for other player\");\n\t\t\t\t\tsetBoard(data);\n\t\t\t\t\tgetMove((data) => {\n\t\t\t\t\t\tif (Array.isArray(data)) {\n\t\t\t\t\t\t\tsetBoard(data);\n\t\t\t\t\t\t\tsetStatus(\"Your Turn!\");\n\t\t\t\t\t\t\tchangeTurn();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tendGame(data);\n\t\t\t\t\t});\n\t\t\t\t} else endGame(data);\n\t\t\t});\n\t\t} else {\n\t\t\tchangePhase();\n\t\t\tchangeTurn();\n\t\t\tsetStatus(\"Waiting for Server..\");\n\t\t\tgetPermittedTiles(row, col, (pt) => {\n\t\t\t\tsetStatus(\"Your Turn!\");\n\t\t\t\tchangeTurn();\n\t\t\t\tif (pt === \"invalid\") {\n\t\t\t\t\tchangePhase();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tchangeBoardState(setBoardState, updateBoardTiles, boardState, pt);\n\t\t\t});\n\t\t}\n\t};\n\n\treturn (\n\t\t<DataContext.Provider\n\t\t\tvalue={{\n\t\t\t\tboard,\n\t\t\t\tfile,\n\t\t\t\tmovePhase,\n\t\t\t\tonSelect,\n\t\t\t\trowSize,\n\t\t\t\tcolSize,\n\t\t\t\tboardState,\n\t\t\t\tturn,\n\t\t\t\tside,\n\t\t\t\tstatus,\n\t\t\t\tgameOver,\n\t\t\t}}>\n\t\t\t{children}\n\t\t</DataContext.Provider>\n\t);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}